#!/usr/bin/env python3

# Static analysis tool to detect modules being used in a script so the compiler
# can include or exclude certain modules based on whether they are used. This
# will output gcc pre-processor defines (-D____) so it can be used in-line
# during the compile step.

import argparse
import json
import os
import pprint
import re
import shutil
import sys

# Globals
args = None
board = None


def main():
    global args, board
    args = parse_args()
    board = args.board

    json_tree = {}
    deps_list = []
    zconf = []
    zjs_conf = []
    jrs_conf = []
    lsrc = []
    js_modules = []

    if not args.script:
        print("Generating modules header")
    else:
        print("Analyzing %s for %s" % (args.script, board))

    # Linux is special cased because it does not use a JS script to build
    if board == 'linux':
        build_tree(json_tree, args.restrict)
        do_print(json_tree)
        all_list = []
        create_dep_list(all_list, board, json_tree)
        for i in sorted(all_list):
            print("Using module: " + i)
        write_modules(all_list, json_tree, args.output_dir)
    # normal case
    else:
        if args.js_out:
            with open(args.script, 'r') as s:
                js = s.read()
            with open(args.js_out, 'w') as f:
                for i in os.listdir("modules/"):
                    if match_require(js, i):
                        js_modules += [i]
                for i in js_modules:
                    with open('modules/' + i) as mod:
                        f.write(mod.read())
                        f.write("\n")
                f.write(js)
            js_file = args.js_out
        else:
            js_file = args.script

        if args.restrict:
            do_print("Only using modules: " + str(args.restrict))

        if args.force:
            do_print("Forcing inclusion of: " + str(args.force))

        build_tree(json_tree, args.restrict)
        do_print(json_tree)
        parse_json_tree(js_file, deps_list, zconf, zjs_conf, jrs_conf, lsrc,
                        json_tree, force=args.force)
        for i in sorted(deps_list):
            print("Using module: " + i)

        write_zconf(zconf, args.prjconf)
        write_cmakefile(lsrc, zjs_conf, args.cmakefile)
        write_jrsconfig(jrs_conf)

        # building for arc does not need zjs_modules_gen.h to be created
        if board != 'arc':
            write_modules(deps_list, json_tree, args.output_dir)


def do_print(s):
    """Debug print controlled with V option"""
    if args.verbose == 1:
        p = pprint.PrettyPrinter(indent=1)
        p.pprint(s)


def merge_lists(l1, l2):
    """Merge l2 into l1, excluding duplicates"""
    for i in l2:
        if i not in l1:
            l1.append(i)


def parse_list(tree, list):
    """Parse a list of JSON files to create a JSON tree

    tree -- Where to store the tree
    list -- List of JSON files
    """
    for file in list:
        if file.endswith(".json"):
            do_print("opening " + file)
            with open(os.path.join(args.json_dir, file)) as f:
                try:
                    data = json.load(f)
                except:
                    print("Error parsing JSON in file: %s" % file)
                    print(sys.exc_info()[1])
                    sys.exit(1)
                if 'targets' in data:
                    # exclude if not found in 'targets'
                    if board not in data['targets']:
                        continue;
                # index the entry by the module name, if exists
                if 'module' in data:
                    if data['module'] in tree:
                        print("Error: JSON entry %s is a duplicate" %
                              data['module'])
                    else:
                        tree[data['module']] = data;


def build_tree(tree, restrict):
    """Wrapper for parse_list() if a restricted list of JSON files is used"""
    if restrict is not None:
        parse_list(tree, restrict)
    else:
        parse_list(tree, os.listdir(args.json_dir))


def create_dep_list_helper(dlist, dep, board, tree):
    """Recursive helper for create_dep_list()"""
    if dep in tree:
        entry = tree[dep]
        if 'targets' in entry:
            # exclude if not found in 'targets'
            if board not in entry.get('targets', []):
                return
        if 'depends' in entry:
            # add list and recursively find any other dependencies
            merge_lists(dlist, entry['depends'])
            for i in entry['depends']:
                create_dep_list_helper(dlist, i, board, tree)


def create_dep_list(dlist, board, tree):
    """Find all dependencies of a list. This is only used by the Linux target
    where a JSON list is manually used rather than parsing a script

    dlist -- List of dependencies to build
    board -- Board to build for
    tree  -- JSON tree
    """
    for dep in tree:
        if 'targets' not in tree[dep]:
            merge_lists(dlist, [dep])
        create_dep_list_helper(dlist, dep, board, tree)


def match_require(js, module, child=None):
    # requires: js is a string chunk of JS code, module is a string module name
    #             we're searching for a require() for, child is an optional
    #             name of a child object e.g. 'client' in require('ocf').client
    child_regex = ""
    if child:
        child_regex = "\.%s " % child
    regex = r"\brequire *\([\'\"]%s[\"\']\)%s" % (module, child_regex)
    return re.search(regex, js)


def parse_json_tree_helper(js, dep, dlist, zlist, zjslist, jrslist, srclist,
                           tree):
    """Recursive helper for parse_json_tree()"""
    if dep not in tree:
        print("Warning: Expected dependency " + dep)
        return

    if dep not in dlist:
        dlist.append(dep)

    entry = tree[dep]
    if 'targets' in entry:
        # exclude incorrect target
        if board not in entry.get('targets', []):
            return

    for i in entry.get('depends', []):
        do_print("gathering dependencies for " + i)
        # add any new deps, and recursively find any more
        parse_json_tree_helper(js, i, dlist, zlist, zjslist, jrslist,
                               srclist, tree)

    if 'src' in entry:
        src = entry['src']
        if isinstance(src, list):
            # simple case, src is a list
            merge_lists(srclist, src)
        else:
            # object case, this is for more complex JS parsing. If you need
            # to selectively include certain files/options based on if an
            # object is used. Currently only require objects are supported,
            # and only 1 layer deep. e.g.

            # var ocf = require('ocf');
            # var client = ocf.client;

            # And properties in the "src" object are searched for in the JS
            # script. "common" is a special case, it will always be included
            # in the build.
            if 'common' in src:
                merge_lists(srclist, src['common'])
            # iterate object properties of "src"
            for key, value in src.items():
                if key != "common":
                    # var x = require(module).key
                    if match_require(js, entry['require'], key):
                        if 'src' in value:
                            merge_lists(srclist, value['src'])
                        if 'zjs_config' in value:
                            merge_lists(zjslist, value['zjs_config'])
                    else:
                        # var x = require(module)
                        # var y = x.y
                        match_name = re.search(r"var\s+(\w+)\s*=\s*require\([\'\"](%s)[\"\']\)" % entry['require'], js)
                        var_name = match_name.groups()[0]
                        match_use = re.search(r"%s\.%s" % (var_name, key), js)
                        if match_use:
                            if 'src' in value:
                                merge_lists(srclist, value['src'])
                            if 'zjs_config' in value:
                                merge_lists(zjslist, value['zjs_config'])
    # add in any zephyr config options
    if 'zephyr_conf' in entry:
        z_conf = entry['zephyr_conf']
        if 'all' in z_conf:
            merge_lists(zlist, z_conf['all'])
        if board in z_conf:
            merge_lists(zlist, z_conf[board])
    # add in any JerryScript config options
    if 'jrs_config' in entry:
        merge_lists(jrslist, entry['jrs_config'])
    # add in any ZJS config options
    if 'zjs_config' in entry:
        merge_lists(zjslist, entry['zjs_config'])


def parse_json_tree(file, dlist, zlist, zjslist, jrslist, srclist, tree,
                    force=None):
    """Using a JS file as input, gather dependencies and generate separate lists
    for each aspect of the build (zephyr options, zjs options, jrs options, src)

    file --    JS file
    dlist --   Where to store dependency list
    zlist --   Where to store Zephyr config options
    zjslist -- Where to store ZJS config options
    jrslist -- Where to store JrS config options
    srclist -- Where to store list of source files
    tree --    JSON tree
    force --   Force inclusion of certain JSON files
    """
    with open(file) as js:
        text = js.read()

    if force is not None:
        for f in force:
            with open(os.path.join(args.json_dir, f)) as file:
                data = json.load(file)
                parse_json_tree_helper(text, data['module'], dlist, zlist,
                                       zjslist, jrslist, srclist, tree)

    # iterate the JSON tree
    for i in tree:
        # find any matching require lines
        if 'require' in tree[i]:
            if match_require(text, tree[i]['require']):
                parse_json_tree_helper(text, i, dlist, zlist, zjslist, jrslist,
                                       srclist, tree)
        # find any matching constructor calls
        elif 'constructor' in tree[i]:
            if re.search(r"%s\(.*" % tree[i]['constructor'], text):
                parse_json_tree_helper(text, i, dlist, zlist, zjslist, jrslist,
                                       srclist, tree)
        # find any matching uses of object
        if 'object' in tree[i]:
            if re.search(r"%s\." % tree[i]['object'], text):
                merge_lists(zjslist, tree[i]['zjs_config'])
                merge_lists(srclist, tree[i]['src'])
                dlist.append(tree[i]['module'])

    # Get any deps for the board
    parse_json_tree_helper(text, board, dlist, zlist, zjslist, jrslist,
                           srclist, tree)

    # check for any virtual deps
    virtualdeps = []
    fulfilled = set()
    for i in dlist:
        if 'virtualdeps' in tree[i]:
            vdeps = tree[i]['virtualdeps']
            merge_lists(virtualdeps, vdeps)
        if 'fulfills' in tree[i]:
            fulfilled.add(tree[i]['fulfills'])

    # add default modules for any unfulfilled virtual deps
    for vdep in virtualdeps:
        if vdep in fulfilled:
            # already fulfilled
            continue
        elif vdep not in tree:
            print("Warning: expected JSON file for virtual dependency " + vdep)
        else:
            defaults = tree[vdep].get('defaults', {})
            if board not in defaults:
                print("Warning: no default found for %s/%s" % (vdep, board))
            else:
                default = defaults[board]
                parse_json_tree_helper(text, default, dlist, zlist, zjslist,
                                       jrslist, srclist, tree)


def write_jrsconfig(list):
    """Write a JerryScript profile file"""
    if args.profile:
        if os.path.exists(args.profile):
            shutil.copyfile(args.profile, args.profile + '.bak')
        with open("fragments/jerry_feature.base", "r") as jrs:
            feature = jrs.read()
        with open(args.profile, "w") as p:
            for i in list:
                feature = feature.replace(i, "#" + i)
            p.write(feature)


def write_cmakefile(src, zconf, file):
    """Write out a src CMake file"""
    with open(file, "w") as f:
        f.write("# This is a generated file\n\n")
        if src:
            for i in src:
                f.write("target_sources(app PRIVATE " + i + ")\n")
            f.write("\n")
            for i in zconf:
                """fixme: include paths should be a separate config"""
                if i.startswith("-I"):
                    f.write("target_include_directories(app PRIVATE " + i[2:] + ")\n")
                elif i.startswith("-D"):
                    f.write("add_definitions(" + i + ")\n")
            f.write("\n")


def expand_match(match):
    """Expand regexp match as a shell variable, if possible"""
    # requires: match should be VARNAME from $(VARNAME) string
    #  effects: tries to expand $VARNAME as a shell variable; if it fails,
    #             returns the original $(VARNAME) string
    varname = match.groups()[0]
    ref = '$' + varname
    expanded = os.path.expandvars(ref)
    if ref == expanded:
        return '$(' + varname + ')'
    return expanded


def write_zconf(list, file):
    """Write Zephyr config options to a file"""
    with open(file, "w") as f:
        for i in list:
            # expand any shell variables of the form $(VARNAME)
            expanded = re.sub(r"\$\((\w+)\)", expand_match, i)
            f.write(expanded + '\n')


def write_modules(list, tree, outdir):
    """Write zjs_modules_gen.h file"""
    headers = []
    gbl_inits = {}
    with open(os.path.join(outdir, 'include/zjs_modules_gen.h'),
              'w') as file:
        for i in list:
            entry = tree.get(i, None)
            if entry:
                if 'header' in entry:
                    merge_lists(headers, entry['header'])
                if 'global_init' in entry:
                    gbl_inits[i] = {}
                    gbl_inits[i]["inits"] = entry['global_init']
                if 'global_cleanup' in entry:
                    gbl_inits[i]["cleanups"] = entry['global_cleanup']
        # Add include headers
        file.write("// This is a generated file\n")
        file.write("// Includes:\n")
        file.write("#include \"jerryscript.h\"\n")
        for i in headers:
            file.write("#include \"%s\"\n" % i)
        file.write("""typedef jerry_value_t (*initcb_t)();
typedef void (*cleanupcb_t)();
typedef struct gbl_module {
    const char *name;
    void (*init)();
    void (*cleanup)();
} gbl_module_t;\n""")
        file.write("gbl_module_t zjs_global_array[] = {\n")
        for i in gbl_inits:
            file.write("    {\"%s\", %s" % (i, gbl_inits[i]["inits"][0]))
            if 'cleanups' in gbl_inits[i]:
                file.write(", %s" % gbl_inits[i]["cleanups"][0])
            file.write("},\n")
        file.write("};\n")


def parse_args():
    parser = argparse.ArgumentParser(
        description=(
            "Static analysis tool to detect modules being used in a script so "
            "the compiler can include or exclude certain modules if they "
            "are/are not used.  This will output gcc pre-processor defines "
            "(-D____) so it can be used in-line -during the compile step."),
    )
    parser.add_argument("--board", required=True, metavar="BOARD_NAME",
                        help="Board target being built.")
    parser.add_argument("--json-dir", required=True, metavar="DIR",
                        help="Directory to look for JSON files.")
    parser.add_argument("--prjconf", metavar="FILE",
                        help="File to write the prj.conf information to.")
    parser.add_argument("--cmakefile", metavar="FILE",
                        help="CMake file to write source/options to.")

    parser.add_argument("--script", metavar="FILE",
                        help="JavaScript script used to build.")
    parser.add_argument("--force", metavar="FILE,FILE,...",
                        help=("Comma separated list of JSON files to force "
                              "inclusion of. Files are located in  the "
                              "directory specified by --json-dir."))
    parser.add_argument("--restrict", metavar="FILE,FILE,...",
                        help=("Comma separated list of JSON files. If "
                              "specified only these JSON files will be used. "
                              "Files are located in the directory specified "
                              "by --json-dir."))
    parser.add_argument("--profile", metavar="FILE",
                        help="File to write the JerryScript profile to.")
    parser.add_argument("--js-out", metavar="FILE",
                        help=("Output file to use if any JS modules are found "
                              "in --script."))
    parser.add_argument("--output-dir", metavar="DIR", default="outdir",
                        help="Output directory.")
    parser.add_argument("--verbose", type=int, choices=[0, 1], default=0,
                        help="Level of verbosity.")

    args = parser.parse_args()

    if args.board != 'linux':
        if not args.prjconf or not args.cmakefile:
            parser.error("Arguments --prjconf and --cmakefile are required "
                         "unless --board is 'linux'")
    else:
        if not args.restrict:
            parser.error("Argument --restrict is required when --board is "
                         "'linux'")
    # Change arguments which take comma separated value strings and convert
    # them into lists of the values.
    for arg_name in ('force', 'restrict'):
        if getattr(args, arg_name):
            setattr(args, arg_name,
                    [x.strip() for x in getattr(args, arg_name).split(',')])
    return args


if '__main__' == __name__:
    sys.exit(main())
