//common parameters
var SSD1306_WIDTH = 128
var SSD1306_HEIGHT = 64
var SSD1306_MAXROW = 8
var SSD1306_DISPLAY_ADDR = 0x3C
//command macro
var SSD1306_CMD_DISPLAY_OFF = 0xAE
var SSD1306_CMD_DISPLAY_ON = 0xAF

 
var pixelBuffer = [
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x80,0x80,0xC0,0xC0,0xE0,0xF0,0xF8,0xFC,0xFC,0xFE,0xFE,0xFE,0xF0,
0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x80,0xC0,0xC0,0xE0,0xF0,0xFC,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,
0xF8,0xF8,0xF0,0xE0,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF8,
0xF8,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x7F,0x7F,0x3F,0x1F,0x1F,0x1F,0x0F,0x0F,
0x0F,0x87,0xCF,0x3F,0x1F,0x0F,0x07,0x07,0x07,0x03,0x03,0x01,0x01,0x01,0x33,0x3F,
0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xF8,0xF0,0xE0,0xE0,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
0xFF,0xFF,0x0F,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,
0xFF,0x1F,0x01,0x03,0x00,0x80,0xF8,0xF8,0xE8,0x00,0x00,0x00,0x00,0x00,0x00,0x40,
0x50,0xC7,0xF7,0xFF,0x7F,0x7F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xF8,
0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
0xFF,0xFE,0xF0,0xE0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x1F,0x3F,0x27,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x10,0x50,0xF0,0xF0,0x60,0xC0,0x80,0x00,0x01,0x07,0x0F,0x1F,0x3F,0x3F,0x3F,0x3F,
0x7F,0x7F,0x7F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE8,0xE0,0xC0,0xE0,0xE0,0xE0,
0xE1,0xF0,0xE0,0xE0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xE0,
0xF6,0xFE,0xBF,0x80,0x80,0x83,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x80,0x80,0x80,0x80,0xC0,0xC1,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x3F,
0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x05,0x0F,
0x1F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x3F,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x03,0x03,0x03,0x07,0x07,0x0F,0x0F,0x0F,0x0F,0x0F,0x1F,0x1F,
0x3F,0x1F,0x7F,0x3F,0x7F,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x1F,
0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x3F,0x7F,0x3F,0x3F,0x3F,0x1F,0x1F,0x0F,0x0F,0x0F,
0x07,0x03,0x03,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 
]

console.log("Display sample...");
 
// Open the connection to the I2C bus
var i2c = require("i2c");
var i2cDevice = i2c.open({ bus: 0, speed: 100 });
 
function init() {
    
    writeCommand(SSD1306_CMD_DISPLAY_OFF);//display off

    writeCommand(0x00);//Set Memory Addressing Mode
    writeCommand(0x01);//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
    writeCommand(0x40);//Set Page Start Address for Page Addressing Mode,0-7
    writeCommand(0xB0);//Set COM Output Scan Direction
    writeCommand(0x81);//---set low column address
    writeCommand(0xCF);//---set high column address
    writeCommand(0xA1);//--set start line address
    writeCommand(0xA6);//--set contrast control register
    writeCommand(0xA8);
    writeCommand(0x3F);//--set segment re-map 0 to 127
    writeCommand(0xC8);//--set normal display
    writeCommand(0xD3);//--set multiplex ratio(1 to 64)
    writeCommand(0x00);//
    writeCommand(0xD5);//0xa4,Output follows RAM content;0xa5,Output ignores RAM content
    writeCommand(0x80);//-set display offset
    writeCommand(0xD9);//-not offset
    writeCommand(0xF1);//--set display clock divide ratio/oscillator frequency
    writeCommand(0xDA);//--set divide ratio
    writeCommand(0x12);//--set pre-charge period
    writeCommand(0xDB);//
    writeCommand(0x40);//--set com pins hardware configuration
    writeCommand(0x8D);//--set vcomh
    writeCommand(0x14);//0x20,0.77xVcc
    writeCommand(0xAF);//--set DC-DC enable 
    writeCommand(SSD1306_CMD_DISPLAY_ON);//--turn on oled panel
}
 
 function printArr ()
 {
    for (i=0; i < 1024; i++)
        console.log(pixelBuffer[i]);
 }

 function clear()
 {
    var y=0;

    var newBuf = [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                ];

    while(y < SSD1306_MAXROW)
    {
        writeCommand(0xB0+y);    //page0-page7
        //newBuf.unshift(0x40);
        //writeData(newBuf);
        i2cWrite(SSD1306_DISPLAY_ADDR, newBuf);
        

        y++;        
    }    
}

// Some images put the bits in reverse order
function reverseByteBits(val) { 
    return ((val & 0x1) << 7) | ((val & 0x2) << 5) | ((val & 0x4) << 3) |
            ((val & 0x8) << 1) | ((val >> 1) & 0x8) | ((val >> 3) & 0x4) |
            ((val >> 5) & 0x2) | ((val >> 7) & 0x1);
}
    
function update(invert)
{  
  var newBuf = [];
  var row=0;    
  var m = 0;

// For 8 ROWS
    while(row < SSD1306_MAXROW)
    {
        writeCommand(0xB0+row);
        newBuf[0] = 0x40;
        // 16 * 8 BLOCKS
        for (var i=1; i < 129; i++) {
            if (!invert)
                newBuf[i] = pixelBuffer[m];                        
            else
                newBuf[i] = pixelBuffer[m] ^ 0xFF;                
            m++;
        }
        i2cWrite(SSD1306_DISPLAY_ADDR, newBuf);
        row++;        
    }    
}
 
function i2cWrite(addr, buf)
{
    i2cDevice.write(addr, new Buffer(buf));    
}
 
function writeData(data)
{
    //data.unshift(0x40);
    i2cDevice.write(SSD1306_DISPLAY_ADDR, new Buffer(buf));    
    //i2cWrite(SSD1306_DISPLAY_ADDR, ); 
}
 
function writeCommand(cmd)
{    
    i2cDevice.write(SSD1306_DISPLAY_ADDR, new Buffer([0x00, cmd])); 
}
 
function drawPixel(x, y, value)
{
    if ((x < 0) || (x >= SSD1306_WIDTH) || (y < 0) || (y >= SSD1306_HEIGHT) || ( pixelBuffer==0))
        return;
     
    var row = parseInt(y/8);
    var offset =y%8;
    var index = row*SSD1306_WIDTH + x;
    var pixelData = pixelBuffer[index];
    
    // get the offset for the pixel;
    pixel = 1 << offset;
    
    if(value === 1)
    {
        pixelBuffer[index] = pixelData | pixel;
    }else
    {
        pixelBuffer[index] = pixelData & (~pixel);
    } 
}

init();
clear();
update(true);
update(false);
update(true);
update(false);
update(true);
update(false);
update(true);
update(true);



